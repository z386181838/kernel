/* eip97_global_types.h
 *
 * EIP97 Global Control Driver Library Public Interface:
 * Common Type Definitions
 *
 */

/*****************************************************************************
* Copyright (c) 2011-2013 INSIDE Secure B.V. All Rights Reserved.
*
* This confidential and proprietary software may be used only as authorized
* by a licensing agreement from INSIDE Secure.
*
* The entire notice above must be reproduced on all authorized copies that
* may only be made to the extent permitted by a licensing agreement from
* INSIDE Secure.
*
* For more information or support, please go to our online support system at
* https://essoemsupport.insidesecure.com.
* In case you do not have an account for this system, please send an e-mail
* to ESSEmbeddedHW-Support@insidesecure.com.
*****************************************************************************/

#ifndef INCLUDE_GUARD_EIP97_GLOBAL_TYPES_H
#define INCLUDE_GUARD_EIP97_GLOBAL_TYPES_H

/*----------------------------------------------------------------------------
 * This module uses (requires) the following interface(s):
 */

// Driver Framework Basic Definitions API
#include "basic_defs.h"             // uint32_t


/*----------------------------------------------------------------------------
 * Definitions and macros
 */

#define EIP97_GLOBAL_IOAREA_REQUIRED_SIZE       (2 * sizeof(void*))

/*----------------------------------------------------------------------------
 * EIP97_Global_Error_t
 *
 * Status (error) code type returned by these API functions
 * See each function "Return value" for details.
 *
 * EIP97_GLOBAL_NO_ERROR : successful completion of the call.
 * EIP97_GLOBAL_UNSUPPORTED_FEATURE_ERROR : not supported by the device.
 * EIP97_GLOBAL_ARGUMENT_ERROR :  invalid argument for a function parameter.
 * EIP97_GLOBAL_BUSY_RETRY_LATER : Device is busy.
 * EIP97_GLOBAL_ILLEGAL_IN_STATE : illegal state transition
 */
typedef enum
{
    EIP97_GLOBAL_NO_ERROR = 0,
    EIP97_GLOBAL_UNSUPPORTED_FEATURE_ERROR,
    EIP97_GLOBAL_ARGUMENT_ERROR,
    EIP97_GLOBAL_BUSY_RETRY_LATER,
    EIP97_GLOBAL_ILLEGAL_IN_STATE
} EIP97_Global_Error_t;

/*----------------------------------------------------------------------------
 * EIP97_Global_Events_t
 *
 * Bit-mask for the events that can be generated by the EIP-97 HW modules:
 * DFE, DSE, EIP-96 PE
 */
typedef enum
{
    // Fatal error events
    EIP97_GLOBAL_DFE_DMA_ERROR_EVENT = BIT_0,
    EIP97_GLOBAL_DSE_DMA_ERROR_EVENT = BIT_1,
    EIP97_GLOBAL_PE_TIMEOUT_EVENT    = BIT_2
} EIP97_Global_Events_t;

// Bit-mask for the events defined by EIP97_Global_Events_t
typedef uint32_t EIP97_Global_EventStatus_t;

// place holder for device specific internal data
typedef struct
{
    uint32_t placeholder[EIP97_GLOBAL_IOAREA_REQUIRED_SIZE];
} EIP97_Global_IOArea_t;


#endif /* INCLUDE_GUARD_EIP97_GLOBAL_TYPES_H */


/* end of file eip97_global_types.h */
